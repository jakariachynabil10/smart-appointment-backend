// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  profilePhoto String?
  password     String
  role         Role          @default(USER)
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Service {
  id            String        @id @default(uuid())
  name          String
  description   String?
  duration      Int
  price         Float?
  specialistId  String?
  specialist    Specialist?   @relation(fields: [specialistId], references: [id])
  appointments  Appointment[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}


model Specialist {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique
  specialty    String?
  service      Service[]
  appointments Appointment[]
  availability Availability[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Appointment {
  id           String            @id @default(uuid())
  user         User              @relation(fields: [userId], references: [id])
  userId       String
  specialist   Specialist        @relation(fields: [specialistId], references: [id])
  specialistId String
  service      Service           @relation(fields: [serviceId], references: [id])
  serviceId    String
  status       AppointmentStatus @default(PENDING)
  date         DateTime
  startTime    DateTime
  endTime      DateTime
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model Availability {
  id           String     @id @default(uuid())
  specialist   Specialist @relation(fields: [specialistId], references: [id])
  specialistId String
  dayOfWeek    Int // 0 = Sunday
  startTime    DateTime
  endTime      DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
  SPECIALIST
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}
